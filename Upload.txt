HALLO DAS IST EIN TEST 12.05.2020 19:05
import tkinter as tk
import os
import RPi.GPIO as GPIO          
from time import sleep

#RaspberryPi Auto_PINS
M2Pin6 = 6
M1Pin19 = 19
M2Pin26 = 26
M1Pin13 = 13


#Init Auto PINS
GPIO.setmode(GPIO.BCM)
GPIO.setup(M2Pin6,GPIO.OUT)
GPIO.output(M2Pin6,GPIO.LOW)
GPIO.setup(M2Pin26,GPIO.OUT)
GPIO.output(M2Pin26,GPIO.LOW)
GPIO.setup(M1Pin19,GPIO.OUT)
GPIO.output(M1Pin19,GPIO.LOW)
GPIO.setup(M1Pin13,GPIO.OUT)
GPIO.output(M1Pin13,GPIO.LOW)

Motor1ParameterForward=GPIO.PWM(M2Pin6,1000) # Motor[1] Parameter
Motor2ParameterBack=GPIO.PWM(M1Pin19,1000) # Motor[2] Parameter 
Motor2ParameterForward=GPIO.PWM(M2Pin26,1000) # Motor[1] Parameter
Motor1ParameterBack=GPIO.PWM(M1Pin13,1000) # Motor[2] Parameter 

os.system('xset r off')

KeyReleased = False
KeyPressed = False

#Auto Kontrolle
AUTO_FORWARD   = 'Up'
AUTO_BACKWARD = 'Down'
AUTO_RIGHT    = 'Right'
AUTO_LEFT     = 'Left'
GANG1    = 'q'
GANG2    = 'w' 
GANG3    = 'e'
Speed = 30


Exit = 'Escape'



######################################################### Arm ######################################################################



######################################################### Auto ######################################################################
#Alle Auto_PINS werden hier gestoppt
def stopAuto():
    GPIO.output(M2Pin6,GPIO.LOW)
    GPIO.output(M2Pin26,GPIO.LOW)
    GPIO.output(M1Pin13,GPIO.LOW)
    GPIO.output(M1Pin19,GPIO.LOW)
    Motor1ParameterForward.stop()
    Motor2ParameterBack.stop()
    Motor1ParameterBack.stop()
    Motor2ParameterForward.stop()
    
    
#Startet die Motoraktion: (Key Pfeil nach oben)
def forwardState(start):
    if start:
        Motor1ParameterForward.start(Speed)
        Motor2ParameterForward.start(Speed)
    else:
        stopAuto()

#Startet die Motoraktion: (Key Pfeil nach unten)
def backwardState(start):
    if start:
        Motor2ParameterBack.start(Speed)
        Motor1ParameterBack.start(Speed)        
    else:
        stopAuto()

#Startet die Motoraktion: (Key Pfeil nach Rechts -->)
def rotateRightState(start):
    if start:
        Motor1ParameterBack.start(Speed)
        Motor2ParameterForward.start(Speed)
    else:
        stopAuto()

#Startet die Motoraktion: (Key Pfeil nach Links <--)
def rotateLeftState(start):
    if start:
        Motor2ParameterBack.start(Speed)
        Motor1ParameterForward.start(Speed)
    else:
        stopAuto()

# LÃ¶st die Tastatureingabe auf
def setStateForButton(button, start):
    print(button.keysym)
    
    global Exit
    global AUTO_FORWARD
    global AUTO_BACKWARD
    global AUTO_RIGHT
    global AUTO_LEFT

    global Speed
    global GANG1
    global GANG2
    global GANG3

    global Arm_RIGHT
    global Arm_LEFT
    
    if button.keysym == AUTO_FORWARD:
        forwardState(start)
    elif button.keysym == AUTO_BACKWARD:
        backwardState(start)
    elif button.keysym == AUTO_RIGHT:
        rotateRightState(start)
    elif button.keysym == AUTO_LEFT:
        rotateLeftState(start)
    elif button.keysym == GANG1:
        Speed = 30
    elif button.keysym == GANG2:
        Speed = 60
    elif button.keysym == GANG3:   
        Speed = 100
    
    elif button.keysym == Exit:
        root.destroy()

def onKey(event):
   
    global KeyReleased
    global KeyPressed
    if KeyReleased == False:
        KeyPressed = True
        setStateForButton(event, 1)
        KeyReleased = True


def onRelease(event):
    global KeyReleased

    if KeyReleased == True:
        KeyPressed = False
        setStateForButton(event, 0)
        KeyReleased = False
        

root = tk.Tk()
root.title("RoboZ")
root.resizable(0, 0)
root.geometry("50x50")
root.pack_propagate(0)
root.bind('<KeyPress>', onKey)
root.bind("<KeyRelease>", onRelease)
root.mainloop()
GPIO.cleanup()






